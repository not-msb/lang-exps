// Basic incrementation
fn inc(x: i64) i64
    + x 1

fn dec(x: i64) i64
    - x 1

fn nothing(x: i64) i64
    inc(dec(x))

fn HOF(x: i64, f: fn(i64) i64) i64 // Simple higher order function
    f(x)

fn incHOF(x: i64) i64 HOF(x, inc)

fn decHOF(x: i64) i64 HOF(x, dec)

fn tup(t: (i64, i64)) (i64, i64) t

fn box(x: i64, y: i64, z: i64) i64
    + + x y z

fn thing(i: i64) i64
    - box(box(i, i, i), box(i, i, i), box(i, i, i)) box(i, i, i)
